<!DOCTYPE html>
<html lang="zh">

<head>
  <meta charset="UTF-8" />
  <title>友善之臂</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/amis/6.2.2/sdk.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/amis/6.2.2/helper.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/amis/6.2.2/iconfont.min.css" />
  <link rel="icon" type="image/x-icon" href="/static/favicon.ico" />
  <script src="https://unpkg.com/vconsole/dist/vconsole.min.js"></script>
  <script>
    var vConsole = new window.VConsole();
  </script>
</head>

<body>
  <div id="root" class="app-wrapper"></div>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/amis/6.2.2/sdk.min.js"></script>
  <script type="text/javascript" src="https://lf1-cdn-tos.bytegoofy.com/goofy/lark/op/h5-js-sdk-1.5.26.js"></script>
  <script type="text/javascript">
    (function () {
      let amis = amisRequire('amis/embed');
      let amisSchema = {{ amis_schema| tojson
    }};
    let amisScoped = amis.embed('#root', amisSchema);
      }) ();
  </script>
  <script type="text/javascript">
    (function () {
      const cardSchema = `{
  "header": {
      "title": {
          "tag": "plain_text",
          "content": "This is Header"
      },
      "template": "purple"
  },
  "elements": [{
      "tag": "div",
      "text": {
          "tag": "plain_text",
          "content": "测试用例：A:1-5"
      }
  }]
}`;
      const urlObj = new URL(location.href);
      // 注意：带 query
      const pageUrl = encodeURIComponent(
        urlObj.origin + urlObj.pathname + urlObj.search
      );
      // 获取签名。注意：这里的请求地址，请换成自己的后端接口地址
      const getSignPromise = window.fetch(`/api/lark_sign?url=${pageUrl}`);
      getSignPromise
        .then((res) => res.json())
        .then((res) => {
          // 换成自己的 appId
          return Object.assign(
            {
              appId: "{{ feishu_appid }}",
            },
            res.data
          );
        })
        .then((res) => {
          if (window.h5sdk) {
            // 接口鉴权
            window.h5sdk.config({
              // 下面这 4 个字段，都需要从生成签名的后端接口返回
              appId: res.appId,
              timestamp: +res.timestamp,
              nonceStr: res.noncestr,
              signature: res.signature,
              jsApiList: [
                // 声明需要使用的方法名
                "getTriggerContext",
                "sendMessageCard",
              ],
              onSuccess: (res) =>
                console.log("config success", JSON.stringify(res)),
            });
            window.h5sdk.error((err) => {
              console.error("config error", JSON.stringify(err));
            });
            window.h5sdk.ready(() => {
              // 从页面 URL 中获取 triggerCode
              let launchQuery = new URLSearchParams(location.search).get(
                "bdp_launch_query"
              );
              if (!launchQuery) {
                console.log("bdp_launch_query not found in URL");
                return;
              }
              launchQuery = JSON.parse(launchQuery);
              const triggerCode = launchQuery.trigger_id;
              /**
               * 使用方式 一
               * 通过 triggerCode 字段指定会话
               */
              tt.sendMessageCard({
                triggerCode: triggerCode,
                cardContent: {
                  msg_type: 'interactive',
                  update_multi: false,
                  card: JSON.parse(cardSchema),
                },
                success(res) {
                  console.log(res);
                },
                fail(res) {
                  console.log(res);
                },
              });
            });
          }
        });
    })();
  </script>
</body>

</html>
